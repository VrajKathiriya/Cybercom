-- create sales database
CREATE DATABASE sales;

-- use sales database
USE sales;

-- create the customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone VARCHAR(20)
);

-- create the products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    unit_price DECIMAL(10, 2),
    description TEXT
);

-- create the orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    customer_id INT,
    product_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- 1.	Insert at least five customers, five products, and ten orders into the respective tables. 
-- Make sure that at least two customers have multiple orders, and at least two products are included in multiple orders.

-- Insert data into the customers table
INSERT INTO customers (customer_id, first_name, last_name, email, phone)
VALUES
(201, 'John', 'Doe', 'john.doe@example.com', '123-456-7890'),
(202, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210'),
(203, 'Michael', 'Johnson', 'michael.j@example.com', '456-789-0123'),
(204, 'Emily', 'Williams', 'emily.w@example.com', '789-012-3456'),
(205, 'David', 'Miller', 'david.m@example.com', '321-654-9870');

-- Insert data into the products table
INSERT INTO products (product_id, product_name, unit_price, description)
VALUES
(101, 'Laptop', 1200.00, 'High-performance laptop with SSD storage'),
(102, 'Smartphone', 700.00, 'Latest smartphone with advanced features'),
(103, 'Headphones', 150.00, 'Noise-canceling headphones for immersive audio'),
(104, 'Tablet', 500.00, 'Portable tablet with touch screen'),
(105, 'Printer', 250.00, 'Color printer for high-quality prints');

-- Insert data into the orders table
INSERT INTO orders (order_id, order_date, customer_id, product_id)
VALUES
(1, '2022-01-15', 201, 101),
(2, '2022-02-20', 202, 102),
(3, '2022-03-25', 203, 102),
(4, '2022-04-10', 204, 104),
(5, '2022-05-05', 205, 105),
(6, '2022-06-15', 201, 102),
(7, '2022-07-20', 202, 104),
(8, '2022-08-25', 203, 105),
(9, '2022-09-30', 204, 101),
(10, '2022-10-10', 205, 103),
(11, '2022-11-15', 201, 105),
(12, '2022-12-20', 201, 101),
(13, '2023-01-25', 201, 103),
(14, '2023-02-10', 202, 102),
(15, '2023-03-05', 203, 104);

-- 2.	Write a query that retrieves the customer's first name, last name, email, and the number of orders they have placed. 
-- The results should be ordered by the number of orders in descending order.
SELECT c.first_name, c.last_name, c.email, c.phone, COUNT(o.order_id) as total_order_placed
FROM customers c
LEFT JOIN orders o
ON c.customer_id = o.customer_id
GROUP by c.customer_id
ORDER by total_order_placed DESC;

-- 3.	Write a query that retrieves the product name, the total number of orders for each product, 
-- and the total revenue generated by each product.
-- The results should be ordered by the total revenue in descending order.
SELECT p.product_name, COUNT(o.order_id) AS total_orders, SUM(p.unit_price) AS total_revenue
FROM products p
LEFT JOIN orders o
ON p.product_id = o.product_id
GROUP BY p.product_id
ORDER BY total_revenue DESC;

-- 4.	Write a query that retrieves the first name, last name, email, and product name for each order. 
-- The results should only include orders where the customer has placed multiple orders.
SELECT o.order_id, c.first_name, c.last_name, c.email, p.product_name
FROM customers c
RIGHT JOIN orders o
ON c.customer_id = o.customer_id
LEFT JOIN products p
ON o.product_id = p.product_id
WHERE c.customer_id IN (
	SELECT customer_id
    FROM orders
    GROUP BY customer_id
    HAVING COUNT(order_id) > 1
);

-- 5.	Write a query that retrieves the first name, last name, and email for each customer 
-- who has placed at least one order for a product with a unit price greater than $50.
SELECT DISTINCT c.first_name, c.last_name, c.email, o.order_id, p.unit_price, p.product_name
FROM customers c
LEFT JOIN orders o
ON c.customer_id = o.customer_id
LEFT JOIN products p
ON p.product_id = o.product_id
WHERE p.unit_price > 50;

-- 6.	Write a query that retrieves the product name and the number of times it has been ordered, 
-- but only includes products that have been ordered more than once
SELECT p.product_name, COUNT(o.order_id) AS total_count
FROM products p
LEFT JOIN orders o
ON p.product_id = o.product_id
GROUP BY p.product_id
HAVING total_count > 1;


















