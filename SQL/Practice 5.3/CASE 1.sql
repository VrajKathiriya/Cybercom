-- 1.	Write a SQL query to retrieve the names and salaries of all employees 
-- who have a salary greater than the average salary of all employees
SELECT employee_name, employee_salary
FROM employees
WHERE employee_salary > (
	SELECT AVG(employee_salary)
    FROM employees
);

-- 2.	Write a SQL query to retrieve the names and total revenue generated by all customers 
-- in the "orders" table, sorted by revenue in descending order
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount),2) AS total_revenue
FROM customers c
JOIN orders o
ON c.customer_id = o.customer_id
GROUP BY c.customer_id;

-- 3.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the total revenue is greater than $10,000
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount),2) AS total_revenue
FROM customers c
JOIN orders o
ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING total_revenue > 10000
ORDER BY total_revenue DESC;

-- 4.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the total revenue is greater than the average revenue generated by all customers.
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount), 2) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING ROUND(SUM(o.amount), 2) > (
	SELECT AVG(total_revenue) 
	FROM (SELECT ROUND(SUM(o.amount), 2) AS total_revenue 
	FROM customers c 
	JOIN orders o 
	ON c.customer_id = o.customer_id 
	GROUP BY c.customer_id) AS subquery
)
ORDER BY total_revenue DESC;

-- 5.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the total revenue is 
-- greater than the average revenue generated by all customers, and the customer is from the "USA" or "Canada"
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount), 2) AS total_revenue, c.country_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.country_name = 'USA' OR c.country_name = 'canada'
GROUP BY c.customer_id
HAVING ROUND(SUM(o.amount), 2) > (
	SELECT AVG(total_revenue) 
	FROM (SELECT ROUND(SUM(o.amount), 2) AS total_revenue 
	FROM customers c 
	JOIN orders o 
	ON c.customer_id = o.customer_id 
	GROUP BY c.customer_id) AS subquery
)
ORDER BY total_revenue DESC;

-- 6.	Write a SQL query to retrieve the names of all employees who have made sales greater than $50,000 in the "orders" table.
SELECT e.employee_name, SUM(od.quantity * od.unit_price) AS total_sales
FROM employees e
JOIN order_details od
ON e.employee_id = od.employee_id
GROUP BY e.employee_name
HAVING total_sales > 50000;

-- 7.	Write a SQL query to retrieve the names of all employees who have made sales 
-- greater than the average sales of all employees in the "orders" table, sorted by sales in descending order.
SELECT e.employee_name, SUM(od.quantity * od.unit_price) AS total_sales
FROM employees e
JOIN order_details od
ON e.employee_id = od.employee_id
GROUP BY e.employee_name
HAVING total_sales > (
	SELECT AVG(total_sales) 
	FROM (
		SELECT AVG(od.quantity * od.unit_price) AS total_sales 
		FROM employees e 
		JOIN order_details od 
		ON e.employee_id = od.employee_id
		GROUP BY e.employee_id
	) AS subquery
);

-- 8.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the customer is from the "USA" and the revenue is greater than $5,000.
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount),2) AS total_revenue
FROM customers c
JOIN orders o
ON c.customer_id = o.customer_id
WHERE c.country_name = 'USA'
GROUP BY c.customer_id
HAVING total_revenue > 5000
ORDER BY total_revenue DESC;

-- 9.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the customer is from the "USA" and 
-- the revenue is greater than the average revenue generated by all customers from the "USA"
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount), 2) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.country_name = 'USA'
GROUP BY c.customer_id
HAVING total_revenue > (
	SELECT AVG(total_revenue) 
	FROM (SELECT ROUND(SUM(o.amount), 2) AS total_revenue 
	FROM customers c 
	JOIN orders o 
	ON c.customer_id = o.customer_id 
    WHERE c.country_name = 'USA'
	GROUP BY c.customer_id) AS subquery
)
ORDER BY total_revenue DESC;

-- 10.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the customer is from the "USA" and
-- the revenue is greater than the average revenue generated by all customers, and the customer has made at least 2 orders
SELECT c.first_name, c.last_name, ROUND(SUM(o.amount), 2) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.country_name = 'USA'
GROUP BY c.customer_id
HAVING total_revenue > (
	SELECT AVG(total_revenue) 
	FROM (SELECT ROUND(SUM(o.amount), 2) AS total_revenue 
	FROM customers c 
	JOIN orders o 
	ON c.customer_id = o.customer_id 
    WHERE c.country_name = 'USA'
	GROUP BY c.customer_id) AS subquery
) AND COUNT(o.id) > 1
ORDER BY total_revenue DESC;



